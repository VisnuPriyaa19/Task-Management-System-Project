{
	"info": {
		"_postman_id": "16379dfb-c3ac-4eef-851b-68c2e4ff718b",
		"name": "Task Management System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45617701"
	},
	"item": [
		{
			"name": "User Requests",
			"item": [
				{
					"name": "User Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Status should be 201 on successful registration\r",
									"pm.test(\"Status is 201 Created\", () => {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Response should have success message\r",
									"pm.test(\"Success message is correct\", () => {\r",
									"  const res = pm.response.json();\r",
									"  pm.expect(res.msg).to.include(\"User registered successfully\");\r",
									"});\r",
									"\r",
									"// If the user already exists, check status 400 and error message\r",
									"if (pm.response.code === 400) {\r",
									"  pm.test(\"User already exists error shown\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.msg).to.eql(\"Username or Email already exists\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// If there's a server error, check for 500\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server errors\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.msg).to.eql(\"Server error during registration\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"uname\" : \"Visnu Priyaa\",\r\n    \"email\" : \"visnupriyaa17@gmail.com\",\r\n    \"password\" : \"Visnu@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Save token to environment\r",
									"if (res.token) {\r",
									"  pm.environment.set(\"authToken\", res.token);\r",
									"}\r",
									"\r",
									"// Success: Status 200\r",
									"pm.test(\"Status is 200 OK\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Success: Message confirms login\r",
									"pm.test(\"Message confirms login\", () => {\r",
									"  pm.expect(res.msg).to.eql(\"Login successful\");\r",
									"});\r",
									"\r",
									"// Success: Token is present\r",
									"pm.test(\"JWT token is present\", () => {\r",
									"  pm.expect(res.token).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"// Invalid username\r",
									"if (pm.response.code === 400 && res.msg === \"Invalid username\") {\r",
									"  pm.test(\"Invalid username handled\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Invalid username\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// Invalid password\r",
									"if (pm.response.code === 400 && res.msg === \"Invalid password\") {\r",
									"  pm.test(\"Invalid password handled\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Invalid password\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// Server error\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Server error handled\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Server error during login\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"uname\": \"Visnu Priyaa\",\r\n  \"password\": \"Visnu@123\"\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send-OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Expect 200 on success\r",
									"if (pm.response.code === 200) {\r",
									"  pm.test(\"Status is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"  });\r",
									"\r",
									"  pm.test(\"Message confirms OTP sent\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.msg).to.eql(\"OTP sent to email\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// Handle server error\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles OTP send failure\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.msg).to.eql(\"Failed to send OTP\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"visnupriyaa17@gmail.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/send-otp",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"auth",
								"send-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify-OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Success case: OTP verified\r",
									"if (pm.response.code === 200) {\r",
									"  pm.test(\"Status is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"  });\r",
									"\r",
									"  pm.test(\"OTP verified message received\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.msg).to.eql(\"OTP verified\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// Error case: Invalid or expired OTP\r",
									"if (pm.response.code === 400) {\r",
									"  pm.test(\"Invalid OTP handled\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.msg).to.eql(\"Invalid or expired OTP\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"visnupriyaa17@gmail.com\",\r\n  \"otp\": \"2095\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/verify-otp",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"auth",
								"verify-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change-Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Success: Password changed\r",
									"if (pm.response.code === 200) {\r",
									"  pm.test(\"Status is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"  });\r",
									"\r",
									"  pm.test(\"Success message is correct\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.msg).to.eql(\"Password changed successfully\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 400 cases\r",
									"if (pm.response.code === 400) {\r",
									"  const msg = pm.response.json().msg;\r",
									"\r",
									"  pm.test(\"Handles validation errors\", () => {\r",
									"    pm.expect([\r",
									"      \"Current password and new password are required\",\r",
									"      \"New password must be at least 6 characters long\",\r",
									"      \"Current password is incorrect\",\r",
									"      \"New password must be different from current password\"\r",
									"    ]).to.include(msg);\r",
									"  });\r",
									"}\r",
									"\r",
									"// 404 case\r",
									"if (pm.response.code === 404) {\r",
									"  pm.test(\"Handles user not found error\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.eql(\"User not found\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 500 case\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.eql(\"Server error during password change\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"currentPassword\": \"Hello@123\",\r\n  \"newPassword\": \"Visnu@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/change-password",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// 200 - Username available\r",
									"if (pm.response.code === 200) {\r",
									"  pm.test(\"Username is available\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Username is available\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 409 - Username exists\r",
									"if (pm.response.code === 409) {\r",
									"  pm.test(\"Username already exists\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Username already exists\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 400 - Missing or empty username\r",
									"if (pm.response.code === 400) {\r",
									"  pm.test(\"Empty username handled\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Username is required\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 500 - Server error\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Server error while checking username\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"uname\": \"Visnu Example\"\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/check-username",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"auth",
								"check-username"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-Username-Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// 200 - Both available\r",
									"if (pm.response.code === 200) {\r",
									"  pm.test(\"Username and Email are available\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Username and Email are available\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 409 - Username and Email exist\r",
									"if (pm.response.code === 409 && res.msg === \"Username and Email already exist\") {\r",
									"  pm.test(\"Both username and email already exist\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Username and Email already exist\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 409 - Username exists\r",
									"if (pm.response.code === 409 && res.msg === \"Username already exists\") {\r",
									"  pm.test(\"Username already exists\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Username already exists\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 409 - Email exists\r",
									"if (pm.response.code === 409 && res.msg === \"Email already exists\") {\r",
									"  pm.test(\"Email already exists\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Email already exists\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 500 - Server error\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Server error while checking user info\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"uname\": \"Revathy\",\r\n  \"email\": \"revathybothu@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/check-username-email",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"auth",
								"check-username-email"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Save new token to environment if present\r",
									"if (res.token) {\r",
									"  pm.environment.set(\"authToken\", res.token);\r",
									"  console.log(\"New token saved to environment:\", res.token);\r",
									"}\r",
									"\r",
									"// Dynamically read the request body\r",
									"let reqBody;\r",
									"try {\r",
									"  reqBody = JSON.parse(pm.request.body.raw);\r",
									"} catch (e) {\r",
									"  reqBody = {};\r",
									"}\r",
									"\r",
									"// 200 - Username updated\r",
									"if (pm.response.code === 200 && res.msg === \"Username updated successfully\") {\r",
									"  pm.test(\"Username updated successfully\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Username updated successfully\");\r",
									"    pm.expect(res.token).to.not.be.undefined;\r",
									"    pm.expect(res).to.have.property(\"newUsername\");\r",
									"\r",
									"    // Dynamically compare with request body input\r",
									"    if (reqBody.newUsername) {\r",
									"      pm.expect(res.newUsername).to.eql(reqBody.newUsername);\r",
									"    }\r",
									"  });\r",
									"}\r",
									"\r",
									"// 200 - Username same as before\r",
									"if (pm.response.code === 200 && res.msg === \"Username is already set to this value\") {\r",
									"  pm.test(\"Username already set to this value\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Username is already set to this value\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 400 - Empty input\r",
									"if (pm.response.code === 400) {\r",
									"  pm.test(\"Handles missing or empty username\", () => {\r",
									"    pm.expect([\r",
									"      \"New username is required\",\r",
									"      \"Username cannot be empty\"\r",
									"    ]).to.include(res.msg);\r",
									"  });\r",
									"}\r",
									"\r",
									"// 409 - Username already exists\r",
									"if (pm.response.code === 409) {\r",
									"  pm.test(\"Handles duplicate username\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Username already exists\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 404 - User not found\r",
									"if (pm.response.code === 404) {\r",
									"  pm.test(\"Handles user not found\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"User not found\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 500 - Server error\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Server error during username update\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"newUsername\": \"Visnu Priyaa B\"\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:5000/api/auth/update-username",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"auth",
								"update-username"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Password Reset",
			"item": [
				{
					"name": "Forgot-Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Check for 200 success\r",
									"pm.test(\"Status is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Success message for existing email\r",
									"pm.test(\"Correct message on email sent\", () => {\r",
									"  pm.expect(res.msg).to.eql(\"Password reset email sent\");\r",
									"});\r",
									"\r",
									"// Generic message for unknown email\r",
									"if (res.msg.includes(\"reset link has been sent\")) {\r",
									"  pm.test(\"Handles unknown email correctly\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"If this email exists, a reset link has been sent\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"visnupriyaa17@gmail.com\"\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:5000/api/password/forgot-password",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"password",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset-Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Status is 200 OK\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Password reset message\", () => {\r",
									"  pm.expect(res.msg).to.eql(\"Password updated successfully\");\r",
									"});\r",
									"\r",
									"if (pm.response.code === 400) {\r",
									"  pm.test(\"Handles expired/invalid token\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Invalid or expired token\");\r",
									"  });\r",
									"}\r",
									"\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Error resetting password\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{resetToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"newPassword\": \"Hello@123\"\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:5000/api/password/reset-password/{{resetToken}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"password",
								"reset-password",
								"{{resetToken}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Create-Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Status check\r",
									"pm.test(\"Status is 201 Created\", () => {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Project creation message\r",
									"pm.test(\"Project creation success message\", () => {\r",
									"  pm.expect(res.msg).to.eql(\"Project created successfully\");\r",
									"});\r",
									"\r",
									"// Project data returned\r",
									"pm.test(\"Project object is returned\", () => {\r",
									"  pm.expect(res.project).to.be.an(\"object\");\r",
									"  pm.expect(res.project).to.have.property(\"projectName\");\r",
									"  pm.expect(res.project).to.have.property(\"projectDesc\");\r",
									"  pm.expect(res.project).to.have.property(\"dueDate\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectName\": \"Project 1\",\r\n  \"projectDesc\": \"Project 1 desc\",\r\n  \"dueDate\": \"2025-11-31\"\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:5000/api/projects",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Projects-By-User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Check status\r",
									"pm.test(\"Status is 200 OK\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if response is an array\r",
									"pm.test(\"Response is an array of projects\", () => {\r",
									"  pm.expect(res).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Optional: Check structure of first project (if any)\r",
									"if (res.length > 0) {\r",
									"  pm.test(\"Each project has required fields\", () => {\r",
									"    pm.expect(res[0]).to.have.property(\"projectName\");\r",
									"    pm.expect(res[0]).to.have.property(\"projectDesc\");\r",
									"    pm.expect(res[0]).to.have.property(\"dueDate\");\r",
									"    pm.expect(res[0]).to.have.property(\"user\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/api/projects/user/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"projects",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "6860dc266893bc9e37973b71"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Project-By-Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Status code\r",
									"pm.test(\"Status is 200 OK\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Project structure\r",
									"pm.test(\"Project contains expected fields\", () => {\r",
									"  pm.expect(res).to.have.property(\"projectName\");\r",
									"  pm.expect(res).to.have.property(\"projectDesc\");\r",
									"  pm.expect(res).to.have.property(\"dueDate\");\r",
									"  pm.expect(res).to.have.property(\"user\");\r",
									"});\r",
									"\r",
									"// User details populated\r",
									"pm.test(\"User is populated with uname and email\", () => {\r",
									"  pm.expect(res.user).to.be.an(\"object\");\r",
									"  pm.expect(res.user).to.have.property(\"uname\");\r",
									"  pm.expect(res.user).to.have.property(\"email\");\r",
									"});\r",
									"\r",
									"// ❌ Project not found case\r",
									"if (pm.response.code === 404) {\r",
									"  pm.test(\"Project not found\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Project not found\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:5000/api/projects/:projectId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"projects",
								":projectId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "6860dd676893bc9e37973b83"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Success status\r",
									"pm.test(\"Status is 200 OK\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Success message\r",
									"pm.test(\"Project update success message\", () => {\r",
									"  pm.expect(res.msg).to.eql(\"Project updated successfully\");\r",
									"});\r",
									"\r",
									"// Updated project data\r",
									"pm.test(\"Updated project returned\", () => {\r",
									"  pm.expect(res.project).to.have.property(\"projectName\");\r",
									"  pm.expect(res.project).to.have.property(\"projectDesc\");\r",
									"  pm.expect(res.project).to.have.property(\"dueDate\");\r",
									"});\r",
									"\r",
									"// Project not found\r",
									"if (pm.response.code === 404) {\r",
									"  pm.test(\"Handles project not found\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Project not found\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// Server error\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Server error while updating project\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectName\": \"Project 1 updated\",\r\n  \"projectDesc\": \"Project 1 desc updated\",\r\n  \"dueDate\": \"2025-08-15\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/projects/:projectId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"projects",
								":projectId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "6860dd676893bc9e37973b83"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// 200 - Project deleted successfully\r",
									"if (pm.response.code === 200) {\r",
									"  pm.test(\"Status is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"  });\r",
									"\r",
									"  pm.test(\"Correct deletion message\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Project deleted successfully\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 404 - Project not found\r",
									"if (pm.response.code === 404) {\r",
									"  pm.test(\"Handles non-existing project\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Project not found\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 500 - Server error\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Server error while deleting project\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/projects/:projectId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"projects",
								":projectId"
							],
							"variable": [
								{
									"key": "projectId",
									"value": "6860d71c6893bc9e37973b39"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create-Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Check status\r",
									"pm.test(\"Status is 201 Created\", () => {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Check success message\r",
									"pm.test(\"Success message received\", () => {\r",
									"  pm.expect(res.msg).to.eql(\"Task created successfully\");\r",
									"});\r",
									"\r",
									"// Check task object present\r",
									"pm.test(\"Created task is returned\", () => {\r",
									"  pm.expect(res.task).to.have.property(\"taskName\");\r",
									"  pm.expect(res.task).to.have.property(\"status\");\r",
									"  pm.expect(res.task).to.have.property(\"project\");\r",
									"});\r",
									"\r",
									"// Server error\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Server error while creating task\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"taskName\": \"Task 1\",\r\n  \"taskDesc\": \"Task 1 desc\",\r\n  \"priority\": \"medium\",\r\n  \"dueDate\": \"2025-09-10\",\r\n  \"status\": \"to-do\",\r\n  \"project\": \"6860dd676893bc9e37973b83\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/tasks",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Tasks-By-Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Check success status\r",
									"pm.test(\"Status is 200 OK\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Response is an array\r",
									"pm.test(\"Response is an array of tasks\", () => {\r",
									"  pm.expect(res).to.be.an('array');\r",
									"});\r",
									"\r",
									"// If projectId filter was used, verify all tasks belong to it\r",
									"if (pm.request.url.query.has('projectId')) {\r",
									"  const projectId = pm.request.url.query.toObject().projectId;\r",
									"  pm.test(\"All tasks belong to requested project\", () => {\r",
									"    res.forEach(task => {\r",
									"      pm.expect(task.project._id || task.project).to.eql(projectId);\r",
									"    });\r",
									"  });\r",
									"}\r",
									"\r",
									"// Server error check\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Server error while retrieving tasks\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/tasks/?projectId=6860dd676893bc9e37973b83",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks",
								""
							],
							"query": [
								{
									"key": "projectId",
									"value": "6860dd676893bc9e37973b83"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Task-By-Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Status code check\r",
									"pm.test(\"Status is 200 OK\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check task fields exist\r",
									"pm.test(\"Response contains task fields\", () => {\r",
									"  pm.expect(res).to.have.property(\"taskName\");\r",
									"  pm.expect(res).to.have.property(\"status\");\r",
									"  pm.expect(res).to.have.property(\"priority\");\r",
									"  pm.expect(res).to.have.property(\"project\");\r",
									"});\r",
									"\r",
									"// Handle 404 error\r",
									"if (pm.response.code === 404) {\r",
									"  pm.test(\"Task not found message\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Task not found\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// Handle 500 error\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Server error while fetching task\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/api/tasks/:taskId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "6860de9b6893bc9e37973b8b"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Status code check\r",
									"pm.test(\"Status is 200 OK\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check success message\r",
									"pm.test(\"Success message returned\", () => {\r",
									"  pm.expect(res.msg).to.eql(\"Task updated successfully\");\r",
									"});\r",
									"\r",
									"// Check task object exists\r",
									"pm.test(\"Updated task is returned\", () => {\r",
									"  pm.expect(res).to.have.property(\"task\");\r",
									"  pm.expect(res.task).to.have.property(\"taskName\");\r",
									"  pm.expect(res.task).to.have.property(\"status\");\r",
									"});\r",
									"\r",
									"// Check if completedAt is set for done\r",
									"if (res.task.status === \"done\") {\r",
									"  pm.test(\"CompletedAt is set\", () => {\r",
									"    pm.expect(res.task.completedAt).to.not.be.null;\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"taskName\": \"Task 1 updated\",\r\n  \"taskDesc\": \"Task 1 desc updated\",\r\n  \"status\": \"done\",\r\n  \"priority\": \"high\",\r\n  \"dueDate\": \"2025-10-05\"\r\n}\r\n"
						},
						"url": {
							"raw": "http://localhost:5000/api/tasks/:taskId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "6860de9b6893bc9e37973b8b"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// 200 - Task deleted successfully\r",
									"if (pm.response.code === 200) {\r",
									"  pm.test(\"Status is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"  });\r",
									"\r",
									"  pm.test(\"Success message confirmed\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Task deleted\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 404 - Task not found\r",
									"if (pm.response.code === 404) {\r",
									"  pm.test(\"Handles non-existing task\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Task not found\");\r",
									"  });\r",
									"}\r",
									"\r",
									"// 500 - Server error (optional safety net)\r",
									"if (pm.response.code === 500) {\r",
									"  pm.test(\"Handles server error\", () => {\r",
									"    pm.expect(res.msg).to.eql(\"Failed to delete task\");\r",
									"  });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/api/tasks/:taskId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"tasks",
								":taskId"
							],
							"variable": [
								{
									"key": "taskId",
									"value": "6860de9b6893bc9e37973b8a"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Response time is under 5000ms\", function()\r",
					"{\r",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
					"});\r",
					"\r",
					"console.log(\"Response time:\" + pm.response.responseTime + \"ms\");\r",
					""
				]
			}
		}
	]
}